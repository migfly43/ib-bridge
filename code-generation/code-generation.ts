// json file generated by https://astexplorer.net/ using typecript parser


import * as _ from "lodash";
const fs = require('fs');
const obj = JSON.parse(fs.readFileSync('./code-generation/outgoing-ast.json', 'utf8'));

const answer = [];
const call = [];
let paramIdx = 1;

_.map(obj.statements, (value, key) => {
  if (value.kind === 229) { // class
    console.log("class", key, value.name.escapedText);

    _.map(value.members, (member) => {
      if (member.name && member.kind === 151) { // member
        console.log("member", member.name.escapedText);

        const parmValues = [];
        _.map(member.parameters, (param) => {
          let type = "UNKNOWN-" + param.type.kind;
          let paramValue: any = "unknown";
          if (param.type.kind === 133) {
            type = "number";
            paramValue = paramIdx;
          } else if (param.type.kind === 136) {
            type = "string";
            paramValue = `"STR:${paramIdx}"`;
          } else if (param.type.kind === 134) {
            type = "object";
            paramValue = "null";
          } else if (param.type.kind === 159) {
            type = param.type.typeName.escapedText;
            paramValue = "val_" + param.type.typeName.escapedText;
            console.log("+-param", param.name.escapedText, type);
          }
          parmValues.push(paramValue);
          paramIdx++;
          console.log("+-param", param.name.escapedText, type);

        });
        answer.push(`if (msg === "send:${member.name.escapedText}") out.${member.name.escapedText}(${parmValues.join(",")});`);
        call.push(`"${member.name.escapedText}"`);
      }
    });
  }
});

console.log("to server/incomming.ts");
console.log(answer.join("\n"));

console.log("to examples/min-bridge-connect.ts");
console.log(call.join(",\n"));



