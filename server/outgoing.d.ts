import { IUnderComp, IExec, IOrder, IContract } from "../lib/interfaces";
import Controller from "./controller";
declare class Outgoing {
    _controller: Controller;
    _send: any;
    constructor(controller: Controller);
    _ACCT_DOWNLOAD_END(accountName: string): void;
    _ACCOUNT_SUMMARY_END(version: number, reqId: number): void;
    _ACCOUNT_SUMMARY(version: number, reqId: number, account: string, tag: string, value: string, currency: string): void;
    _ACCOUNT_UPDATE_MULTI_END(reqId: number): void;
    _ACCOUNT_UPDATE_MULTI(reqId: number, account: string, modelCode: string, key: string, value: string, currency: string): void;
    _ACCT_UPDATE_TIME(timeStamp: string): void;
    _ACCT_VALUE(key: string, value: string, currency: string): void;
    _COMMISSION_REPORT(execId: string, commission: number, currency: string, realizedPNL: number, field: number, yieldRedemptionDate: number): void;
    _BOND_CONTRACT_DATA(reqId: number, contract: IContract): void;
    _CONTRACT_DATA(reqId: number, contract: IContract): void;
    _CONTRACT_DATA_END(reqId: number): void;
    _CURRENT_TIME(time: number): void;
    _DELTA_NEUTRAL_VALIDATION(reqId: number, underComp: IUnderComp): void;
    _ERR_MSG(errorCode: number, errorMsg: string, id: number): void;
    _EXECUTION_DATA(reqId: number, contract: IContract, exec: IExec): void;
    _EXECUTION_DATA_END(reqId: number): void;
    _FUNDAMENTAL_DATA(reqId: number, data: string): void;
    _HISTORICAL_DATA(reqId: number, startDateStr: string, endDateStr: string, itemCount: number, historical: object): void;
    _HEAD_TIMESTAMP(reqId: number, headTimestamp: string): void;
    _MANAGED_ACCTS(): void;
    _MARKET_DATA_TYPE(reqId: number, marketDataType: number): void;
    _MARKET_DEPTH(id: number, position: number, operation: number, side: number, price: number, size: number): void;
    _MARKET_DEPTH_L2(id: number, position: number, marketMaker: string, operation: number, side: number, price: number, size: number): void;
    _NEWS_BULLETINS(newsMsgId: number, newsMsgType: number, newsMessage: string, originatingExch: string): void;
    _NEXT_VALID_ID(orderId: number): void;
    _OPEN_ORDER(order: IOrder, contract: IContract): void;
    _OPEN_ORDER_END(): void;
    _ORDER_STATUS(id: number, status: string, filled: number, remaining: number, avgFillPrice: number, permId: number, parentId: number, lastFillPrice: number, whyHeld: number): void;
    _PORTFOLIO_VALUE(contract: IContract, position: number, marketPrice: number, marketValue: number, averageCost: number, unrealizedPNL: number, realizedPNL: number, primaryExch: string): void;
    _POSITION(account: string, contract: IContract, pos: number, avgCost: number): void;
    _POSITION_END(): void;
    _POSITION_MULTI(reqId: number, account: string, contract: IContract, pos: number, avgCost: number): void;
    _POSITION_MULTI_END(reqId: number): void;
    _REAL_TIME_BARS(reqId: number, time: number, open: number, high: number, low: number, close: number, volumn: number, wap: number, count: number): void;
    _RECEIVE_FA(faDataType: number, xml: string): void;
    _SCANNER_DATA(tickerId: number, numberOfElements: number, scannerData: object): void;
    _SCANNER_PARAMETERS(xml: string): void;
    _SECURITY_DEFINITION_OPTION_PARAMETER(reqId: number, exchange: string, underlyingConId: number, tradingClass: string, multiplier: string, expCount: number, expData: object, strikeCount: number, strikeData: object): void;
    _SECURITY_DEFINITION_OPTION_PARAMETER_END(reqId: number): void;
    _TICK_EFP(tickerId: number, tickType: number, basisPoints: number, formattedBasisPoints: string, impliedFuturesPrice: number, holdDays: number, futureExpiry: string, dividendImpact: number, dividendsToExpiry: number): void;
    _TICK_GENERIC(tickerId: number, tickType: number, value: number): void;
    _TICK_OPTION_COMPUTATION(tickerId: number, tickType: number, delta: number, optPrice: number, pvDividend: number, gamma: number, vega: number, theta: number, undPrice: number): void;
    _TICK_PRICE(tickerId: number, tickType: number, price: number): void;
    _TICK_SIZE(tickerId: number, tickType: number, size: number): void;
    _TICK_SNAPSHOT_END(reqId: number): void;
    _TICK_STRING(tickerId: number, tickType: number, value: string): void;
    _DISPLAY_GROUP_LIST(reqId: number, list: string): void;
    _DISPLAY_GROUP_UPDATED(reqId: number, contractInfo: string): void;
}
export default Outgoing;
