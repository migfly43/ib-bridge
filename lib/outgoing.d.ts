import { IFilter, IOutContract, ISubscription } from './interfaces';
import Controller from "./controller";
declare class Outgoing {
    _controller: Controller;
    _send: any;
    constructor(controller: Controller);
    calculateImpliedVolatility(reqId: number, contract: IOutContract, optionPrice: any, underPrice: any): void;
    calculateOptionPrice(reqId: number, contract: IOutContract, volatility: any, underPrice: any): void;
    cancelAccountSummary(reqId: number): void;
    cancelAccountUpdatesMulti(reqId: number): void;
    cancelPositionsMulti(reqId: number): void;
    cancelCalculateImpliedVolatility(reqId: number): void;
    cancelCalculateOptionPrice(reqId: number): void;
    cancelFundamentalData(reqId: number): void;
    cancelHistoricalData(tickerId: number): void;
    cancelMktData(tickerId: number): void;
    cancelMktDepth(tickerId: number): void;
    cancelNewsBulletins(): void;
    cancelOrder(id: any): void;
    cancelPositions(): void;
    cancelRealTimeBars(tickerId: number): void;
    cancelScannerSubscription(tickerId: number): void;
    exerciseOptions(tickerId: number, contract: IOutContract, exerciseAction: any, exerciseQuantity: any, account: any, override: any): void;
    placeOrder(id: any, contract: IOutContract, order: any): void;
    replaceFA(faDataType: any, xml: any): void;
    reqAccountSummary(reqId: number, group: any, tags: any): void;
    reqAccountUpdates(subscribe: any, acctCode: any): void;
    reqAccountUpdatesMulti(reqId: number, acctCode: any, modelCode: any, ledgerAndNLV: any): void;
    reqAllOpenOrders(): void;
    reqAutoOpenOrders(bAutoBind: any): void;
    reqHeadTimestamp(reqId: number, contract: IOutContract, whatToShow: any, useRTH: any, formatDate: any): void;
    reqContractDetails(reqId: number, contract: IOutContract): void;
    reqCurrentTime(): void;
    reqExecutions(reqId: number, filter: IFilter): void;
    reqFundamentalData(reqId: number, contract: IOutContract, reportType: any): void;
    reqGlobalCancel(): void;
    reqHistoricalData(tickerId: number, contract: IOutContract, endDateTime: any, durationStr: any, barSizeSetting: any, whatToShow: any, useRTH: any, formatDate: any, keepUpToDate: any): void;
    reqIds(numIds: any): void;
    reqManagedAccts(): void;
    reqMarketDataType(marketDataType: any): void;
    reqMktData(tickerId: number, contract: IOutContract, genericTickList: any, snapshot: any, regulatorySnapshot: any): void;
    reqMktDepth(tickerId: number, contract: IOutContract, numRows: any): void;
    reqNewsBulletins(allMsgs: any): void;
    reqOpenOrders(): void;
    reqPositions(): void;
    reqPositionsMulti(reqId: number, account: any, modelCode: any): void;
    reqRealTimeBars(tickerId: number, contract: IOutContract, barSize: any, whatToShow: any, useRTH: any): void;
    reqScannerParameters(): void;
    reqScannerSubscription(tickerId: number, subscription: ISubscription): void;
    requestFA(faDataType: any): void;
    setServerLogLevel(logLevel: any): void;
    queryDisplayGroups(reqId: number): void;
    updateDisplayGroup(reqId: number, contractInfo: any): void;
    subscribeToGroupEvents(reqId: number, groupId: any): void;
    unsubscribeToGroupEvents(reqId: number): void;
    reqSecDefOptParams(reqId: number, underlyingSymbol: any, futFopExchange: any, underlyingSecType: any, underlyingConId: any): void;
    debugMsg(msg: string): void;
}
export default Outgoing;
