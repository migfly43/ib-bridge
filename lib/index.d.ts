/// <reference types="node" />
import * as events from 'events';
import Controller from './controller';
declare class IB extends events.EventEmitter {
    _controller: Controller;
    contract: any;
    order: any;
    util: any;
    constructor(options: any);
    _send(...argumentList: any[]): void;
    connect(): this;
    disconnect(): this;
    calculateImpliedVolatility(reqId: any, contract: any, optionPrice: any, underPrice: any): this;
    calculateOptionPrice(reqId: any, contract: any, volatility: any, underPrice: any): this;
    cancelAccountSummary(reqId: any): this;
    cancelPositionsMulti(reqId: any): this;
    cancelAccountUpdatesMulti(reqId: any): this;
    cancelCalculateImpliedVolatility(reqId: any): this;
    cancelCalculateOptionPrice(reqId: any): this;
    cancelFundamentalData(reqId: any): this;
    cancelHistoricalData(tickerId: any): this;
    cancelMktData(tickerId: any): this;
    cancelMktDepth(tickerId: any): this;
    cancelNewsBulletins(): this;
    cancelOrder(id: any): this;
    cancelPositions(): this;
    cancelRealTimeBars(tickerId: any): this;
    cancelScannerSubscription(tickerId: any): this;
    exerciseOptions(tickerId: any, contract: any, exerciseAction: any, exerciseQuantity: any, account: any, override: any): this;
    placeOrder(id: any, contract: any, order: any): this;
    replaceFA(faDataType: any, xml: any): this;
    reqAccountSummary(reqId: any, group: any, tags: any): this;
    reqAccountUpdates(subscribe: any, acctCode: any): this;
    reqAccountUpdatesMulti(reqId: any, acctCode: any, modelCode: any, ledgerAndNLV: any): this;
    reqAllOpenOrders(): this;
    reqAutoOpenOrders(bAutoBind: any): this;
    reqContractDetails(reqId: any, contract: any): this;
    reqCurrentTime(): this;
    reqExecutions(reqId: any, filter: any): this;
    reqFundamentalData(reqId: any, contract: any, reportType: any): this;
    reqGlobalCancel(): this;
    reqHeadTimestamp(reqId: any, contract: any, whatToShow: any, useRTH: any, formatDate: any): void;
    reqSecDefOptParams(reqId: any, underlyingSymbol: any, futFopExchange: any, underlyingSecType: any, underlyingConId: any): this;
    reqHistoricalData(tickerId: any, contract: any, endDateTime: any, durationStr: any, barSizeSetting: any, whatToShow: any, useRTH: any, formatDate: any, keepUpToDate: any): this;
    reqIds(numIds: any): this;
    reqManagedAccts(): this;
    reqMarketDataType(marketDataType: any): this;
    reqMktData(tickerId: any, contract: any, genericTickList: any, snapshot: any, regulatorySnapshot: any): this;
    reqMktDepth(tickerId: any, contract: any, numRows: any): this;
    reqNewsBulletins(allMsgs: any): this;
    reqOpenOrders(): this;
    reqPositions(): this;
    reqPositionsMulti(reqId: any, account: any, modelCode: any): this;
    reqRealTimeBars(tickerId: any, contract: any, barSize: any, whatToShow: any, useRTH: any): this;
    reqScannerParameters(): this;
    reqScannerSubscription(tickerId: any, subscription: any): this;
    requestFA(faDataType: any): this;
    setServerLogLevel(logLevel: any): this;
    queryDisplayGroups(reqId: any): this;
    updateDisplayGroup(reqId: any, contractInfo: any): this;
    subscribeToGroupEvents(reqId: any, groupId: any): this;
    unsubscribeToGroupEvents(reqId: any): this;
    debugMsg(msg: string): this;
}
export default IB;
